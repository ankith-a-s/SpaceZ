//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSNDashboard.DSNService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DSNService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpacecraftData", ReplyAction="http://tempuri.org/IService1/GetSpacecraftDataResponse")]
        string GetSpacecraftData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpacecraftData", ReplyAction="http://tempuri.org/IService1/GetSpacecraftDataResponse")]
        System.Threading.Tasks.Task<string> GetSpacecraftDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendCommandToSpacecraft", ReplyAction="http://tempuri.org/IService1/SendCommandToSpacecraftResponse")]
        string SendCommandToSpacecraft(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendCommandToSpacecraft", ReplyAction="http://tempuri.org/IService1/SendCommandToSpacecraftResponse")]
        System.Threading.Tasks.Task<string> SendCommandToSpacecraftAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFlightDetails", ReplyAction="http://tempuri.org/IService1/getFlightDetailsResponse")]
        string getFlightDetails(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFlightDetails", ReplyAction="http://tempuri.org/IService1/getFlightDetailsResponse")]
        System.Threading.Tasks.Task<string> getFlightDetailsAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TelemetryDataFromLaunchVehicle", ReplyAction="http://tempuri.org/IService1/TelemetryDataFromLaunchVehicleResponse")]
        string TelemetryDataFromLaunchVehicle(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TelemetryDataFromLaunchVehicle", ReplyAction="http://tempuri.org/IService1/TelemetryDataFromLaunchVehicleResponse")]
        System.Threading.Tasks.Task<string> TelemetryDataFromLaunchVehicleAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TelemetryDataFromPayload", ReplyAction="http://tempuri.org/IService1/TelemetryDataFromPayloadResponse")]
        string TelemetryDataFromPayload(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TelemetryDataFromPayload", ReplyAction="http://tempuri.org/IService1/TelemetryDataFromPayloadResponse")]
        System.Threading.Tasks.Task<string> TelemetryDataFromPayloadAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : DSNDashboard.DSNService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DSNDashboard.DSNService.IService1>, DSNDashboard.DSNService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSpacecraftData(string value) {
            return base.Channel.GetSpacecraftData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetSpacecraftDataAsync(string value) {
            return base.Channel.GetSpacecraftDataAsync(value);
        }
        
        public string SendCommandToSpacecraft(int value) {
            return base.Channel.SendCommandToSpacecraft(value);
        }
        
        public System.Threading.Tasks.Task<string> SendCommandToSpacecraftAsync(int value) {
            return base.Channel.SendCommandToSpacecraftAsync(value);
        }
        
        public string getFlightDetails(int value) {
            return base.Channel.getFlightDetails(value);
        }
        
        public System.Threading.Tasks.Task<string> getFlightDetailsAsync(int value) {
            return base.Channel.getFlightDetailsAsync(value);
        }
        
        public string TelemetryDataFromLaunchVehicle(int value) {
            return base.Channel.TelemetryDataFromLaunchVehicle(value);
        }
        
        public System.Threading.Tasks.Task<string> TelemetryDataFromLaunchVehicleAsync(int value) {
            return base.Channel.TelemetryDataFromLaunchVehicleAsync(value);
        }
        
        public string TelemetryDataFromPayload(int value) {
            return base.Channel.TelemetryDataFromPayload(value);
        }
        
        public System.Threading.Tasks.Task<string> TelemetryDataFromPayloadAsync(int value) {
            return base.Channel.TelemetryDataFromPayloadAsync(value);
        }
    }
}
