//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSNWebApp.DSNService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DSNService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadTelemetryData", ReplyAction="http://tempuri.org/IService1/GetPayloadTelemetryDataResponse")]
        System.Xml.Linq.XElement[] GetPayloadTelemetryData(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadTelemetryData", ReplyAction="http://tempuri.org/IService1/GetPayloadTelemetryDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetPayloadTelemetryDataAsync(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadProcessedData", ReplyAction="http://tempuri.org/IService1/GetPayloadProcessedDataResponse")]
        System.Xml.Linq.XElement[] GetPayloadProcessedData(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadProcessedData", ReplyAction="http://tempuri.org/IService1/GetPayloadProcessedDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetPayloadProcessedDataAsync(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLaunchVehicleTelemetryData", ReplyAction="http://tempuri.org/IService1/GetLaunchVehicleTelemetryDataResponse")]
        System.Xml.Linq.XElement[] GetLaunchVehicleTelemetryData(string launchVehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLaunchVehicleTelemetryData", ReplyAction="http://tempuri.org/IService1/GetLaunchVehicleTelemetryDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetLaunchVehicleTelemetryDataAsync(string launchVehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLaunchVehicleData", ReplyAction="http://tempuri.org/IService1/GetLaunchVehicleDataResponse")]
        System.Xml.Linq.XElement GetLaunchVehicleData(string launchVehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLaunchVehicleData", ReplyAction="http://tempuri.org/IService1/GetLaunchVehicleDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLaunchVehicleDataAsync(string launchVehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadData", ReplyAction="http://tempuri.org/IService1/GetPayloadDataResponse")]
        System.Xml.Linq.XElement GetPayloadData(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayloadData", ReplyAction="http://tempuri.org/IService1/GetPayloadDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPayloadDataAsync(string payloadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLaunchVehicleData", ReplyAction="http://tempuri.org/IService1/GetAllLaunchVehicleDataResponse")]
        System.Xml.Linq.XElement[] GetAllLaunchVehicleData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLaunchVehicleData", ReplyAction="http://tempuri.org/IService1/GetAllLaunchVehicleDataResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetAllLaunchVehicleDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/launchSpacecraft", ReplyAction="http://tempuri.org/IService1/launchSpacecraftResponse")]
        bool launchSpacecraft(string name, int orbit, string payloadName, string payloadType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/launchSpacecraft", ReplyAction="http://tempuri.org/IService1/launchSpacecraftResponse")]
        System.Threading.Tasks.Task<bool> launchSpacecraftAsync(string name, int orbit, string payloadName, string payloadType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/receiveCommandFromLaunchVehicle", ReplyAction="http://tempuri.org/IService1/receiveCommandFromLaunchVehicleResponse")]
        void receiveCommandFromLaunchVehicle(int launchVehicleId, string command, System.Xml.Linq.XElement payloadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/receiveCommandFromLaunchVehicle", ReplyAction="http://tempuri.org/IService1/receiveCommandFromLaunchVehicleResponse")]
        System.Threading.Tasks.Task receiveCommandFromLaunchVehicleAsync(int launchVehicleId, string command, System.Xml.Linq.XElement payloadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/receiveCommandFromPayload", ReplyAction="http://tempuri.org/IService1/receiveCommandFromPayloadResponse")]
        void receiveCommandFromPayload(int payloadId, string command, System.Xml.Linq.XElement payloadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/receiveCommandFromPayload", ReplyAction="http://tempuri.org/IService1/receiveCommandFromPayloadResponse")]
        System.Threading.Tasks.Task receiveCommandFromPayloadAsync(int payloadId, string command, System.Xml.Linq.XElement payloadData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : DSNWebApp.DSNService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DSNWebApp.DSNService.IService1>, DSNWebApp.DSNService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Xml.Linq.XElement[] GetPayloadTelemetryData(string payloadId) {
            return base.Channel.GetPayloadTelemetryData(payloadId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetPayloadTelemetryDataAsync(string payloadId) {
            return base.Channel.GetPayloadTelemetryDataAsync(payloadId);
        }
        
        public System.Xml.Linq.XElement[] GetPayloadProcessedData(string payloadId) {
            return base.Channel.GetPayloadProcessedData(payloadId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetPayloadProcessedDataAsync(string payloadId) {
            return base.Channel.GetPayloadProcessedDataAsync(payloadId);
        }
        
        public System.Xml.Linq.XElement[] GetLaunchVehicleTelemetryData(string launchVehicleId) {
            return base.Channel.GetLaunchVehicleTelemetryData(launchVehicleId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetLaunchVehicleTelemetryDataAsync(string launchVehicleId) {
            return base.Channel.GetLaunchVehicleTelemetryDataAsync(launchVehicleId);
        }
        
        public System.Xml.Linq.XElement GetLaunchVehicleData(string launchVehicleId) {
            return base.Channel.GetLaunchVehicleData(launchVehicleId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLaunchVehicleDataAsync(string launchVehicleId) {
            return base.Channel.GetLaunchVehicleDataAsync(launchVehicleId);
        }
        
        public System.Xml.Linq.XElement GetPayloadData(string payloadId) {
            return base.Channel.GetPayloadData(payloadId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPayloadDataAsync(string payloadId) {
            return base.Channel.GetPayloadDataAsync(payloadId);
        }
        
        public System.Xml.Linq.XElement[] GetAllLaunchVehicleData() {
            return base.Channel.GetAllLaunchVehicleData();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> GetAllLaunchVehicleDataAsync() {
            return base.Channel.GetAllLaunchVehicleDataAsync();
        }
        
        public bool launchSpacecraft(string name, int orbit, string payloadName, string payloadType) {
            return base.Channel.launchSpacecraft(name, orbit, payloadName, payloadType);
        }
        
        public System.Threading.Tasks.Task<bool> launchSpacecraftAsync(string name, int orbit, string payloadName, string payloadType) {
            return base.Channel.launchSpacecraftAsync(name, orbit, payloadName, payloadType);
        }
        
        public void receiveCommandFromLaunchVehicle(int launchVehicleId, string command, System.Xml.Linq.XElement payloadData) {
            base.Channel.receiveCommandFromLaunchVehicle(launchVehicleId, command, payloadData);
        }
        
        public System.Threading.Tasks.Task receiveCommandFromLaunchVehicleAsync(int launchVehicleId, string command, System.Xml.Linq.XElement payloadData) {
            return base.Channel.receiveCommandFromLaunchVehicleAsync(launchVehicleId, command, payloadData);
        }
        
        public void receiveCommandFromPayload(int payloadId, string command, System.Xml.Linq.XElement payloadData) {
            base.Channel.receiveCommandFromPayload(payloadId, command, payloadData);
        }
        
        public System.Threading.Tasks.Task receiveCommandFromPayloadAsync(int payloadId, string command, System.Xml.Linq.XElement payloadData) {
            return base.Channel.receiveCommandFromPayloadAsync(payloadId, command, payloadData);
        }
    }
}
